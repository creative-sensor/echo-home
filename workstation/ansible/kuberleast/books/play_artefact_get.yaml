---
- hosts: master
  vars:
    APT_LIST_DEPENDS: []
    ghit_dir:
      - ~/ghit/crio
  become: false



  tasks:
    - name: remotehost - create directory
      become: false
      ansible.builtin.file:
        path: "{{ ARTEFACT_DIR }}/{{ item }}"
        state: directory
      with_items:
        - crio
        - deb
        - container-images

    - name: apt - query level-1 depends
      shell: |
        apt-cache depends {{item}} |  grep "Depends[^\<\>]\+$" |  awk  -F ':'   '{ print $2 }'
      register: QUERY_DEPENDS
      loop: "{{APT_LIST}}"
  
    
    - name: apt - build list of level-1 depends
      set_fact:
        APT_LIST_DEPENDS: "{{ APT_LIST_DEPENDS + item.stdout_lines }}"
      with_items: "{{ QUERY_DEPENDS.results }}"
  
  
    - name: debug - APT_LIST_DEPENDS - rid-nBCH  
      debug:
        msg: "{{APT_LIST_DEPENDS}}"
        verbosity: 3
  
  
    - name: apt - download
      shell: |
        if ! dpkg -l {{item}} > /dev/null ; then
          apt-get download {{item}}
        fi
  
        if ! ls -la . | grep -o {{item}}.*.deb  ;  then
          apt-get download {{item}}
        fi
      args:
        chdir: "{{ ARTEFACT_DIR }}/deb"
      with_items: "{{ APT_LIST + APT_LIST_DEPENDS }}"


    - name: crio - git clone | crio
      ansible.builtin.git:
        repo: "{{ SOURCE_URL.CRIO }}"
        dest: "{{ ghit_dir[0] }}"
        version: "{{ SOURCE_REVISION['CRIO'] }}"
        archive: "~/{{ ARTEFACT_DIR }}/crio/{{ SOURCE_REVISION['CRIO'] }}.zip"
  
    - name: crio - download binary
      ansible.builtin.get_url:
        url: "{{ CRIO['SOURCE_ARTIFACT_URL'] }}/cri-o.amd64.{{ SOURCE_REVISION['CRIO'] }}.tar.gz"
        dest: "{{ ARTEFACT_DIR }}/crio/cri-o.amd64.{{ SOURCE_REVISION['CRIO'] }}.tar.gz"


    - name: container images - save
      become: true
      shell: |
        for i in $(sudo podman images --format json | jq -r '.[].Names[0]') ; do
            img_name=$(basename $i | sed s,:,__,)
            img_dir_name=$(dirname $i)
            mkdir -p $img_dir_name
            podman save $i -o ${img_dir_name}/${img_name}
        done
      args:
        chdir: "{{ ARTEFACT_DIR }}/container-images"

  
    - name: localhost - create directory
      become: false
      ansible.builtin.file:
        path: "../{{ ARTEFACT_DIR }}"
        state: directory
      delegate_to: localhost
  
  
    - name: rsync - pull packages from remote to localhost
      become: false
      synchronize:
        mode: pull
        src: "{{ ARTEFACT_DIR }}/"
        dest: "../{{ ARTEFACT_DIR }}"




