"-------- [MISC] --------
syntax on
highlight CursorLine cterm=NONE ctermbg=251
    "highlight CursorLine cterm=NONE ctermbg=24
filetype on



"-------- [VARSET] --------
set laststatus=2
set ruler
set cursorline
set hlsearch
set nowrap
set expandtab
set tabstop=4
"set mouse=a
set guicursor=n-v-i:underline
set splitright
set paste
set title titlestring=VIM\ \|\ %{fnamemodify(getcwd(),\ ':t')} titlelen=32
    "output:  VIM | current_dirname
set background=light
set shell=\"/bin/bash\"
set backspace=indent,eol,start
set ff=unix
set foldlevelstart=10
let g:yaml_revealer_separator='âž¤'
    "<C-v>u27a4

"-------- [GUI / NEOVIDE] --------
if exists('g:neovide')
  let g:neovide_cursor_animation_length = 0
  let g:neovide_cursor_vfx_mode = ""
  let g:neovide_scroll_animation_length = 0.001
"  set guifont=SF\ Mono:h14
endif

"-------- [PLUGIN / VUNDLE] --------
set nocompatible              " be iMproved, required
filetype off                  " required
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
        "Plugin Manager
Plugin 'thaerkh/vim-workspace'
        "Workspace
Plugin 'jreybert/vimagit'
        "Git workflow
Plugin 'tpope/vim-fugitive'
        "Git commands
Plugin 'junegunn/gv.vim'
        "Git browser
Plugin 'lifepillar/vim-solarized8'
        "Colorscheme
Plugin 'jlanzarotta/bufexplorer'
        "Buffer Explorer
Plugin 'Einenlum/yaml-revealer'
        "echo yaml path'
Plugin 'pedrohdz/vim-yaml-folds'
Plugin 'Yggdroot/indentLine'
Plugin 'hashivim/vim-terraform'
Plugin 'equal-l2/vim-base64'
call vundle#end()            " required
filetype plugin indent on    " required

"-------- [PLUGIN / VIM-PLUG] --------
source ~/.vim/vim-plug/plug.vim
call plug#begin()
" List your plugins here
"Plug 'nvim-pack/nvim-spectre'
Plug 'nvim-tree/nvim-web-devicons'
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-lualine/lualine.nvim'
Plug 'nvim-telescope/telescope.nvim'
Plug 'shaunsingh/solarized.nvim'
Plug 'ellisonleao/gruvbox.nvim'
call plug#end()


"-------- [LUA-INIT] --------
set rtp+=~/.vim/lua
lua require("neo-init")


"-------- [FUNCTIONS] --------

fun! FindJsonPath()
  " FIND JSON PATH
  let path_file = tempname()
  let @j = expand("%:p")
  exec '!find-jsonpath '.getreg('j').' > '.path_file
  exec 'vsplit '.path_file
  exec 'set filetype=yaml'
  call delete(path_file)
endfun
command! -nargs=0 Jpath call FindJsonPath()


fun! FindYamlPath()
  " FIND YAML PATH
  let path_file = tempname() . '.yaml'
  let @y = expand("%:p")
  exe '!find-yamlpath '.getreg('y').' > '.path_file
  exe 'vsplit '.path_file
  call delete(path_file)
endfun
command! -nargs=0 Ypath call FindYamlPath()


fun! FindGrep(filename)
  " FIND FILES AND POPULATE THE QUICKFIX LIST
  let error_file = tempname()
  exe '!find "./"| grep -i "'.a:filename.'" | xargs file | sed "s/:/:1:/" > '.error_file
  set errorformat=%f:%l:%m
  exe "cfile ". error_file
  copen
  call delete(error_file)
endfun
command! -nargs=1 FindGrep call FindGrep(<q-args>)


function FgXp(pattern, maxdepth=32)
  " FIELD GIT EXPLORER
  let error_file = tempname()
  exe '!find "./" -maxdepth ' . a:maxdepth . ' -type f | grep -v "^./.git" | grep -i "'  .  a:pattern  .  '" | sed "s/\$/:1/" > '.error_file
  set errorformat=%f:%l
  exe "cfile ". error_file
  copen
  call delete(error_file)
endfun
command! -nargs=* FgXp call FgXp(<q-args>)

function Base64e()
  " BASE64 ENCODING
  let file = bufname()
  exec "vnew ".file."__base64"
  exec 'silent read !base64 <'.file.'| tr -d -t "\n"'
endfunction

function EVsplitX(pattern,maxdepth=3)
  vsplit
  call FgXp(a:pattern,a:maxdepth)
endfunction
command! -nargs=* Evx call EVsplitX(<f-args>)


fun! GrepSource(text)
  " GREP SOURCE CODE WHICH CONTAINS TEXT
  " :Grin text  " open window of search results
  " CTRLw gf    " open file in new tab
  let error_file = tempname()
  exe '!grep -rin '.a:text.' >  '.error_file
  set errorformat=%f:%l:%m
  exe "cfile ". error_file
  copen
  call delete(error_file)
endfun
command! -nargs=1 Grin call GrepSource(<q-args>)






function ShellPython()
    set shell=python
    exec "below terminal"
    set shell=bash
endfunction


function ShellContainer(image="ubuntu:latest",cmd="bash --rcfile /dkr/rc")
	let color_ps1 = "Q09MT1JfQkc9J1xbXDAzM1s0ODs1OzkwbVxdJwpDT0xPUl9GRz0nXFtcMDMzWzM4OzU7MjUybVxdJwpTVE9QPSdcW1wwMzNbMG1cXScKClBTMT0iJHtDT0xPUl9CR30ke0NPTE9SX0ZHfVx1QFxoOlx3JHtTVE9QfSAiCg=="
	let envfile = ".env.".substitute(a:image, ":", "__", "")
	"if ! filereadable(envfile)
	"	let envfile = ".env"
	"endif
    silent exec '! touch '.envfile.'; test -z "$(<'.envfile.')" && echo PROMPT_COMMAND="\"cd /dkr/$(basename $(pwd));unset PROMPT_COMMAND\"" > '.envfile
    silent exec '! if tail -1 '.envfile '| grep -q ^PROMPT_COMMAND= ; then echo '.color_ps1.' | base64 -d >> '.envfile.' ; fi'
    exec 'below term docker run --rm --env-file '.envfile.' -v "$(pwd)/'.envfile.':/dkr/rc" -v "$(pwd):/dkr/$(basename $(pwd))" -it '.a:image.' '.a:cmd
endfunction
command! -nargs=1 ShellContainer call ShellContainer(<q-args>)


function SessionMgmt()
    let limit = 512
    "exec "! set -x ; rm $(find Session.vim -mtime +7)"
    silent exec "! [[ ".limit." -lt $(wc -l Session.vim  | awk '{print $1}') ]] && rm Session.vim"
endfunction

function StartUp()
endfunction


function YsonLine()
  normal! yy
  let yson_filename = bufname('%')
  let yson_bufnr = bufnr(yson_filename)
  let yson_winids = win_findbuf(yson_bufnr)

  let yson_line = yson_filename."_line.json"
  let bufnr = bufnr(yson_line)
  if bufnr != -1
    let winids = win_findbuf(bufnr)
    call win_gotoid(winids[0])
    execute '%delete _'
  else
    execute 'split '.yson_line 
  endif
  let command = "echo '".@"."' | yq -o json"
  let @" = system(command)
  normal! p
  call win_gotoid(yson_winids[0])
endfunction


"-------- [AUTOCMD] --------
autocmd FileType yaml  : set tabstop=2
autocmd VimEnter * silent call SessionMgmt()
autocmd InsertEnter * highlight CursorLine ctermbg=190 guibg=#D5EE16 | highlight StatusLine ctermbg=190 guibg=#CCFF00
autocmd InsertLeave * highlight CursorLine ctermbg=254 guibg=#dadeaf | highlight StatusLine ctermbg=254 guibg=#eee8d5
" akss



"-------- [KEYMAP] --------
map ys : call YsonLine() <CR>
map T : tabnew . <CR>
    "New tab
map C : s/^/#/<CR>
    "Comment
map uc : s/^#//<CR>
    "Uncomment
map Bp : bp<CR>
    "Buffer back
map Bn : bn<CR>
    "Buffer next
map aC : :%!column -t<CR>
    "Format as columns
map WW : wa<CR>
    "Save all
map QQ : wqa<CR>
    "Save and quit all
map q0 : qa!<CR>
    "Quit all
map q1 : q!<CR>
    "Quit current

map tty : highlight Terminal ctermbg=23 ctermfg=15 guibg=#073042 guifg=#7ec1de \| below terminal <CR>

map e3 : vsplit \| call FgXp(".",3)<CR>
map e6 : vsplit \| call FgXp(".",6)<CR>
map e9 : vsplit \| call FgXp(".",9)<CR>
    "List file at maxdepth=X

map f5 : edit <CR>
map e. : edit . <CR>
map t. : tabnew . <CR>
map s. : split . <CR>
map v. : vsplit . <CR>
map dfe : diffoff! <CR>
map dff : windo diffthis<CR>
map dfg : diffget<CR>
map b64 : call Base64e()<CR>
map dex : Git <CR>tty<CR><C-w>L<C-w>=
map hls : set hls!<CR>
vmap b64    \atob<Esc>
vmap b94    \btoa<Esc>

nnoremap cup : Git commit -m "up"<CR>

vnoremap ccp    "+y
vnoremap ===    "+y : vsplit <CR> : Grin <C-R>+ <CR>
    "LOOK UP KEYWORD
    ":copy selected text into register '+'
    ":vertical split window
    ":and call function Grin which take
    "content of '+' as argument

vnoremap --    "+y : vsplit <C-R>+ <CR>
    "JUMP TO PATH

nnoremap <F5><F5> : edit<CR>

"-------- [POST-INIT] --------
"colorscheme solarized8_high
"colorscheme solarized
colorscheme gruvbox
